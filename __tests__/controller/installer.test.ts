import fs from 'fs';
import path from 'path';

import { createTmpDir, describeIf, initContext } from '../helpers/test_helpers.test';
import { RenpyInstaller } from '../../src/controller/installer';
import { RenpyInstallerOptions } from '../../src/model/parameters';
import { RenpyDlcUpdateCurrent } from '../../src/model/renpy';

jest.mock('@actions/core');

let tmpdir = '';

beforeEach(async () => {
  tmpdir = createTmpDir();
  initContext();
});

afterEach(async () => {
  fs.rmSync(tmpdir, { recursive: true });

  jest.resetAllMocks();
  jest.clearAllMocks();
  jest.restoreAllMocks();
});

describe('isLoadWorking', () => {
  it.each([
    ['6.99.14.3', true],
    ['7.4.9', true],
    ['7.5.3', true],
    ['8.0.3', true],
    ['6.77.77', false]
  ])('Load %s (%s)', async (version, should_succeed) => {
    const installer = new RenpyInstaller(path.join(tmpdir, 'renpy'), version);

    if (should_succeed) {
      await expect(installer.load()).resolves.not.toThrow();
      expect(installer.getMetadata()).not.toBeUndefined();
    } else {
      await expect(installer.load()).rejects.toThrowError();
      expect(installer.getMetadata()).toBeUndefined();
    }
  });
});

describe('isInstallWorking', () => {
  it.each([['8.0.3']])(
    "Install Ren'Py %s",
    async version => {
      const renpy_dir = path.join(tmpdir, 'renpy');
      const installer = new RenpyInstaller(renpy_dir, version);
      const opts: RenpyInstallerOptions = {
        android_aab_properties: {},
        android_apk_properties: {},
        android_sdk: false,
        android_sdk_owner: '',
        android_sdk_install_input: '',
        dlc_list: [],
        live2d_url: '',
        update_path: false,
        version
      };
      await expect(installer.install(opts)).resolves.not.toThrow();
      expect(fs.existsSync(renpy_dir)).toBeTruthy();
    },
    3 * 60 * 1000
  );
});

describe('isDlcInstallWorking', () => {
  it.each([['8.0.3', ['steam'], ['lib/py3-linux-x86_64/libsteam_api.so']]])(
    'Install Renpy %s DLC %s',
    async (renpy_version, dlcs, expect_files) => {
      const renpy_dir = path.join(tmpdir, 'renpy');
      const opts: RenpyInstallerOptions = {
        android_aab_properties: {},
        android_apk_properties: {},
        android_sdk: false,
        android_sdk_owner: '',
        android_sdk_install_input: '',
        dlc_list: dlcs,
        live2d_url: '',
        update_path: false,
        version: renpy_version
      };
      const installer = new RenpyInstaller(renpy_dir, renpy_version);
      await expect(installer.install(opts)).resolves.not.toThrow();
      const location = renpy_dir;
      for (const filepath of expect_files) {
        expect(fs.existsSync(path.join(location, filepath))).toBeTruthy();
      }
      /* Ensure the update file was changed */
      const current_json_file_path = path.join(renpy_dir, 'update', 'current.json');
      const current_json_content = JSON.parse(
        fs.readFileSync(current_json_file_path, 'utf-8')
      ) as RenpyDlcUpdateCurrent;
      const current_keys: string[] = [];
      for (const key in current_json_content) {
        current_keys.push(key);
      }
      for (const dlc of dlcs) {
        expect(current_keys).toContain(dlc);
      }
    },
    3 * 60 * 1000
  );
});

describeIf(!!process.env['JAVA_HOME'], 'isAndroidSdkInstallWorking', () => {
  it.each([['8.0.3', ['rapt', 'rapt/Sdk']]])(
    'Install Renpy %s DLC %s',
    async (renpy_version, expect_files) => {
      const renpy_dir = path.join(tmpdir, 'renpy');
      const opts: RenpyInstallerOptions = {
        android_aab_properties: { 'key.store.password': 'test_password', 'new.key': 'tee' },
        android_apk_properties: {},
        android_sdk: true,
        android_sdk_owner: 'AnOwnerName',
        android_sdk_install_input: '',
        dlc_list: ['rapt'],
        live2d_url: '',
        update_path: false,
        version: renpy_version
      };
      const installer = new RenpyInstaller(renpy_dir, renpy_version);
      await expect(installer.install(opts)).resolves.not.toThrow();
      const location = renpy_dir;
      for (const filepath of expect_files) {
        expect(fs.existsSync(path.join(location, filepath))).toBeTruthy();
      }
      const bundle_content = fs.readFileSync(
        path.join(location, 'rapt', 'project', 'bundle.properties')
      );
      const bundle_lines = bundle_content.toString().split('\n');
      // Ensure key.store.password is replaced
      const bundle_password_keys = bundle_lines.filter(v => v.startsWith('key.store.password='));
      expect(bundle_password_keys).toHaveLength(1);
      expect(bundle_password_keys[0]).toBe('key.store.password=test_password');
      // Ensure new.key is created
      expect(bundle_lines).toContain('new.key=tee');
      // Ensure one of the keys generated by Ren'Py still exists
      expect(bundle_lines.filter(v => v.startsWith('sdk.dir='))).toHaveLength(1);
    },
    3 * 60 * 1000
  );
});
